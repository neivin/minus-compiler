import absyn.*;
import java_cup.runtime.*;

/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:

    /* Change the method report_error so it will display the line and
       column of where the error occurred in the input as well as the
       reason for the error which is passed into the method in the
       String 'message'. */
    public void report_error(String message, Object info) {

        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");

        /* Check if the information passed to the method is the same
           type as the type java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the
               information in the object info that is being typecasted
               as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);

            /* Check if the line number in the input is greater or
               equal to zero. */
            if (s.left >= 0) {
                /* Add to the end of the StringBuffer error message
                   the line number of the error in the input. */
                m.append(" in line "+(s.left+1));
                /* Check if the column number in the input is greater
                   or equal to zero. */
                if (s.right >= 0)
                    /* Add to the end of the StringBuffer error message
                       the column number of the error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }

        /* Add to the end of the StringBuffer error message created in
           this method the message that was passed into this method. */
        m.append(" : "+message);

        /* Print the contents of the StringBuffer 'm', which contains
           an error message, out on a line. */
        System.err.println(m);
    }

    /* Change the method report_fatal_error so when it reports a fatal
       error it will display the line and column number of where the
       fatal error occurred in the input as well as the reason for the
       fatal error which is passed into the method in the object
       'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }
:};

/* Terminal and Non terminal declaration */

terminal String ID, NUM;
terminal IF, ELSE, WHILE;
terminal INTEGER, VOID, RETURN;
terminal PLUS, MINUS, MUL, DIV, EQU;
terminal LESS, GREATER, LEQUIV,GEQUIV, EQUIV, NEQUIV;
terminal SEMI, COMMA, LPAREN, RPAREN, LSQUARE, RSQUARE, LCURLY, RCURLY;
terminal ERROR;

non terminal program;
non terminal type_specifier;
non terminal decl_list, decl, var_decl, fun_decl, local_decls;
non terminal params, param_list, param;
non terminal compound_stmt, stmt_list, stmt, expr_stmt, selection_stmt, iteration_stmt, return_stmt;
non terminal expr, simple_expr, additive_expr;
non terminal var, term, factor, call, args, arg_list, relop, addop, mulop;

precedence  right  ELSE;

start with program;

program     ::= decl_list:s
              {:  RESULT = s;
                  System.out.println("Something");
              :}
            ;

decl_list   ::= decl_list:d1 decl:d2
                {: 
                  DecList decs = d1;
                  while(decs.tail != null)
                    decs = decs.tail;
                  decs.tail = new DecList(d2, null);
                  RESULT = d1; 
                :}
              | decl:d
                {: 
                  RESULT = new DecList(d, null); 
                :}
              | error:e
                {:
                  parser.report_error ("Invalid syntax in Declaration List (DecList)", e);
                :}
              ;

decl        ::= var_decl:v
                {: RESULT = v; :}
              | fun_decl:f
                {: RESULT = f; :}
              ;

var_decl    ::= type_specifier:t ID:i SEMI
                {:  RESULT = new SimpleDec(tleft, t, i); :}
              | type_specifier:t ID:i LSQUARE NUM:n RSQUARE SEMI
                {: RESULT = new ArrayDec(tleft,t, i, new IntExp(nleft, n)); :}
              ;


type_specifier  ::= INTEGER:i
                    {: RESULT = new Type(ileft, Type.INT); :}
                  | VOID:v
                    {: RESULT = new Type(vleft, Type.VOID); :}
                  ;

fun_decl    ::= type_specifier:t  ID:i  LPAREN param_list:p RPAREN  compound_stmt:c
                {: RESULT = new FunctionDec(tleft, t, i, p, c); :}
              | type_specifier:t  ID:i  LPAREN VOID RPAREN  compound_stmt:c
                {: RESULT = new FunctionDec(tleft, t, i, null, c); :}
              ;

param_list  ::= param_list:l  COMMA  param:p
                {: 
                  VarDecList decs = l;
                  while(decs.tail != null)
                    decs = decs.tail;
                  decs.tail = new VarDecList(p, null);
                  RESULT = l;
                :}
              | param:p
                {: RESULT = new VarDecList(p, null); :}
              | error:e
                {:
                  parser.report_error("Invalid syntax in parameters of function declaration", e);
                :}
              ;

param       ::= type_specifier:t  ID:i
                {: RESULT = new SimpleDec(tleft, t, i); :}
              | type_specifier:t  ID:i  LSQUARE RSQUARE
                {: RESULT = new SimpleDec(tleft, t, i); :}
              ;


compound_stmt ::= LCURLY:c  local_decls:l stmt_list:s RCURLY
                  {: RESULT = new CompoundExp(cleft, l, s); :}
                ;

local_decls   ::= local_decls:l var_decl:v
                  {: 
                    VarDecList decs = l;
                    while (decs.tail != null)
                      decs = decs.tail;
                    decs.tail = new VarDecList(lleft, v, null);
                    RESULT = l; 
                  :}
                |
                  {: RESULT = null; :}
                | error:e var_decl:v
                  {:
                    parser.report_error ("Invalid syntax in variable declarations", e);
                    RESULT = new VarDecList(v, null);
                  :}
                ;

stmt_list   ::= stmt_list:l stmt:s
                {:
                  ExpList exps = l;
                  while (exps.tail != null)
                    exps = exps.tail;
                  exps.tail = new ExpList(s, null);
                  RESULT = l; :}
              |
                {: RESULT = null; :}
              | error:e
                {:
                  parser.report_error("Invalid syntax in statement list",e);
                :}
              ;

stmt        ::= expr_stmt:e
                {: RESULT = e; :}
              | compound_stmt:c
                {: RESULT = c; :}
              | selection_stmt:s
                {: RESULT = s; :}
              | iteration_stmt:i
                {: RESULT = i; :}
              | return_stmt:r
                {: RESULT = r; :}
              ;

expr_stmt   ::= expr:e  SEMI
                {: RESULT = e; :}
              | SEMI:s
                {: RESULT = new NilExp(sleft); :}
              ;


selection_stmt  ::= IF:i  LPAREN  expr:e  RPAREN  stmt:s
                    {: RESULT = new IfExp(ileft, e, s, new NilExp(sleft)); :}
                  | IF:i  LPAREN  expr:e  RPAREN  stmt:s1  ELSE  stmt:s2
                    {: RESULT = new IfExp(ileft, e, s1, s2); :}
                  ;

iteration_stmt  ::= WHILE:w LPAREN  expr:e  RPAREN  stmt:s
                    {: RESULT = new WhileExp(wleft, e, s); :}
                  ;

return_stmt     ::= RETURN:r  SEMI
                    {: RESULT = new ReturnExp(rleft, null); :}
                  | RETURN:r expr:e SEMI
                    {: RESULT = new ReturnExp(rleft, e); :}
                  ;

expr            ::= var:v EQU expr:e
                    {: RESULT = new AssignExp(vleft, v, e); :}
                  | simple_expr:s
                    {: RESULT = s; :}
                  ;

var             ::= ID:i
                    {: RESULT = new SimpleVar(ileft, i); :}
                  | ID:i  LSQUARE expr:e RSQUARE
                    {: RESULT = new IndexVar(ileft, i, e); :}
                  ;

simple_expr     ::= additive_expr:a1 relop:r additive_expr:a2
                    {:  RESULT = new OpExp(a1left, a1, r, a2);  :}
                  | additive_expr:a
                    {:  RESULT = a;  :}
                  ;

relop           ::= LEQUIV
                    {:  RESULT = OpExp.LE;  :}
                  | LESS
                    {:  RESULT = OpExp.LT;  :}
                  | GREATER
                    {:  RESULT = OpExp.GT;  :}
                  | GEQUIV
                    {:  RESULT = OpExp.GE;  :}
                  | EQUIV
                    {:  RESULT = OpExp.EQ;  :}
                  | NEQUIV
                    {:  RESULT = OpExp.NE;  :}
                  ;

additive_expr   ::= additive_expr:a addop:o term:t
                    {:  RESULT = new OpExp(aleft, a, o, t);  :}
                  | term:t
                    {:  RESULT = t;  :}
                  ;

addop           ::= PLUS
                    {:  RESULT = OpExp.PLUS;  :}
                  | MINUS
                    {:  RESULT = OpExp.MINUS;  :}
                  ;

term            ::= term:t  mulop:m factor:f
                    {: RESULT = new OpExp(tleft, t, m, f);   :}
                  | factor:f
                    {:  RESULT = f;  :}
                  ;

mulop           ::= MUL
                    {:  RESULT = OpExp.MUL;  :}
                  | DIV
                    {:  RESULT = OpExp.DIV;  :}
                  ;

factor          ::= LPAREN:l  expr:e  RPAREN
                    {:  RESULT = e;  :}
                  | var:v
                    {:  RESULT = new VarExp(vleft, v);  :}
                  | call:c
                    {:  RESULT = c;  :}
                  | NUM:n
                    {:  RESULT = new IntExp(nleft, Integer.parseInt(n));  :}
                  ;

call            ::= ID:i  LPAREN  args:a  RPAREN
                    {:  RESULT = new CallExp(ileft, i, a);  :}
                  ;

args            ::= arg_list:a
                    {:  RESULT = a;  :}
                  |
                    {:  RESULT = null;  :}
                  ;

arg_list         ::=  arg_list:a  COMMA expr:e
                    {:  
                      ExpList args = a;
                      while (args.tail != null)
                        args = args.tail;
                      args.tail = new ExpList(e, null);
                      RESULT = a;  
                    :}
                  | expr:e
                    {:  RESULT = new ExpList(e, null);  :}
                  | error:e
                    {:
                      parser.report_error("Invalid syntax in function call arguments", e);
                    :}
                  ;
